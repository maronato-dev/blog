version: "3.7"
services:
  traefik:
    command: >
      --providers.docker
      --providers.docker.swarmMode=true
      --providers.docker.exposedbydefault=false
      --providers.docker.network=proxy
      --accesslog=true
      --metrics.prometheus=true
      --api.dashboard=true
      --entrypoints.web.address=:80
      --entrypoints.websecure.address=:443
      --certificatesResolvers.le.acme.email=${EMAIL}
      --certificatesResolvers.le.acme.storage=acme.json
      --certificatesResolvers.le.acme.httpChallenge=true
      --certificatesResolvers.le.acme.httpChallenge.entryPoint=web
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - node.role == manager
      labels:
        # Enable traefik
        - traefik.enable=true
        # Traefik constraints
        - traefik.tags=traefik-public
        # Use the proxy network for communication
        - traefik.docker.network=proxy
        # Traefik should live under traefik.DOMAIN
        - traefik.http.routers.traefik.rule=Host(`traefik.${DOMAIN}`)
        # Register the Dashboard service
        - traefik.http.routers.traefik.service=api@internal
        # Add Authentication to prevent unauthorized access to the dashboard
        - traefik.http.routers.traefik.middlewares=traefik_service_auth
        # Users and passwords
        - traefik.http.middlewares.traefik_service_auth.basicauth.usersfile=/run/secrets/traefik_users
        # Dummy service for Swarm port detection. The port can be any valid integer value.
        - traefik.http.services.dummy-svc.loadbalancer.server.port=9999
        # Enable tls through Lets Encrypt
        - traefik.http.routers.traefik.tls=true
        - traefik.http.routers.traefik.tls.certresolver=le
        # Configure Traefik to redirect all http requests to https
        - traefik.http.middlewares.https_redirect.redirectscheme.scheme=https
        - traefik.http.middlewares.https_redirect.redirectscheme.permanent=true
        - traefik.http.routers.http_catchall.rule=HostRegexp(`{any:.+}`)
        - traefik.http.routers.http_catchall.entrypoints=web
        - traefik.http.routers.http_catchall.middlewares=https_redirect
        # Accept only https
        - traefik.http.routers.traefik.entrypoints=websecure
        # Redirect bare DOMAIN to blog.DOMAIN
        - traefik.http.routers.root.entrypoints=websecure
        - traefik.http.routers.root.rule=Host(`${DOMAIN}`)
        - traefik.http.routers.root.middlewares=redirect-to-blog
        - traefik.http.middlewares.redirect-to-blog.redirectregex.regex=^https://${DOMAIN}(.*)
        - traefik.http.middlewares.redirect-to-blog.redirectregex.replacement=https://blog.${DOMAIN}$${1}
    secrets:
      - traefik_users
  ghost:
    environment:
      database__client: sqlite3
      admin__url: https://blog.${DOMAIN}
      url: https://blog.${DOMAIN}
    deploy:
      labels:
        # Enable traefik
        - traefik.enable=true
        # Traefik constraints
        - traefik.tags=traefik-public
        # Use the proxy network for communication
        - traefik.docker.network=proxy
        # Ghost should live under ghost.DOMAIN
        - traefik.http.routers.ghost.rule=Host(`blog.${DOMAIN}`) && PathPrefix(`/ghost/`, `/content/`, `/members/`, `/sitemap`,  `/robots.txt`, `/{lang:.+}/{opt:(rss|feed)}/`)
        # Make sure the loadbalancer uses the correct port
        - traefik.http.services.ghost.loadbalancer.server.port=2368
        # Enable tls through Lets Encrypt
        - traefik.http.routers.ghost.tls=true
        - traefik.http.routers.ghost.tls.certresolver=le
        # Accept both http and https
        - traefik.http.routers.ghost.entrypoints=websecure
  commento:
    environment:
      - COMMENTO_ORIGIN=https://commento.${DOMAIN}
    deploy:
      labels:
        # Enable traefik
        - traefik.enable=true
        # Traefik constraints
        - traefik.tags=traefik-public
        # Use the proxy network for communication
        - traefik.docker.network=proxy
        # Commento should live under commento.DOMAIN
        - traefik.http.routers.commento.rule="Host(`commento.${DOMAIN}`)"
        # Make sure the loadbalancer uses the correct port
        - traefik.http.services.commento.loadbalancer.server.port=8060
        # Enable tls through Lets Encrypt
        - traefik.http.routers.commento.tls=true
        - traefik.http.routers.commento.tls.certresolver=le
        # Accept both http and https
        - traefik.http.routers.commento.entrypoints=websecure
  frontend:
    command: yarn start
    build:
      args:
        APP_ENV: prod
    environment:
      - NODE_ENV=production
    deploy:
      labels:
        # Enable traefik
        - traefik.enable=true
        # Traefik constraints
        - traefik.tags=traefik-public
        # Use the proxy network for communication
        - traefik.docker.network=proxy
        # Frontend should live under DOMAIN
        - traefik.http.routers.frontend.rule=Host(`blog.${DOMAIN}`)
        # Make sure the loadbalancer uses the correct port
        - traefik.http.services.frontend.loadbalancer.server.port=3000
        # Enable tls through Lets Encrypt
        - traefik.http.routers.frontend.tls=true
        - traefik.http.routers.frontend.tls.certresolver=le
        # Accept both http and https
        - traefik.http.routers.frontend.entrypoints=websecure
  prerender:
    restart: always
    build:
      context: ./prerender
    environment:
      - S3_CACHE=1
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME}
      - S3_PREFIX_KEY=${S3_PREFIX_KEY}
    deploy:
      labels:
        # Disable traefik
        - traefik.enable=false
secrets:
  traefik_users:
    file: ./traefik_users
